.. _usage_expression:

Parcellating expression data
============================

.. _usage_expression_basic:

Basic usage
-----------

Once you've downladed the microarray data and selected your parcellation you
can process the data. This is as simple as:

.. doctest::
    :options: +SKIP

    >>> expression = abagen.get_expression_data(atlas['image'])

But it is highly recommended you provide the additional information on your
parcellation, which can be done with:

.. doctest::

    >>> expression = abagen.get_expression_data(atlas['image'], atlas['info'])

.. note::

    By default this function will use data from *all* the donors! Wrangling all
    this raw microarray data can be quite time-consuming, so if you'd like to
    speed up this step make sure you've performed the :ref:`io_installation`.
    Alternatively, if you don’t want to use all the donors you can provide the
    subject IDs of the donors you want (e.g., ``donors=['9861', '10021']``).

The :func:`abagen.get_expression_data` function will print out some information
about what's happening as it goes. However, briefly the function:

    1. Fetches the microarray data from AHBA (if this has not already been
       done). Refer to parameters ``data_dir`` and ``donors`` for more info.
    2. Updates the MNI coordinates of all the tissue samples from AHBA using
       the coordinates from the ``alleninf`` package. This occurs by default;
       refer to parameter ``corrected_mni`` for more info.
    3. Mirrors samples across hemispheres to increase spatial coverage. This
       does not occur by default; refer to parameter ``lr_mirror`` for more
       info (or see :ref:`usage_expression_lrmirror`).
    4. Reannotates microarray probe-to-gene mappings with information from
       Arnatkevic̆iūtė et al., 2019, NeuroImage. This occurs by default; refer
       to parameter ``reannotated`` for more info.
    5. Performs intensity-based filtering of probes to remove those that do not
       exceed background noise. This occurs by default with a threshold of
       0.5 (i.e., probes must exceed background noise in 50% of all tissue
       samples); refer to parameter ``ibf_threshold`` for more info.
    6. Selects a representative probe amongst those probes indexing the same
       gene. This occurs by default by selecting the probe with the highest
       differential stability amongst donors; refer to parameter
       ``probe_selection`` for more info (or see :ref:`usage_probe_selection`).
    7. Matches tissue samples to regions in the user-specified ``atlas``. Refer
       to parameters ``atlas``, ``atlas_info``, ``exact``, and ``tolerance``
       for more info (or see :ref:`usage_expression_exact`).
    8. Normalizes expression values for each sample across genes for each
       donor. This occurs by default using a scaled robust sigmoid
       normalization function; refere to parameter ``sample_norm`` for more
       info.
    9. Normalizes expression values for each gene across samples for each
       donor. This occurs by default using a scaled robust sigmoid
       normalization function; refer to parameter ``gene_norm`` for more info.
    10. Aggregates samples within regions in the user-specified ``atlas`` based
        on matches made in Step 7. By default, samples are averaged separately
        for each donor and then averaged across donors. Refer to parameters
        ``region_agg``, ``agg_metric``, and ``return_donors`` for more info.

You can investigate all these parameters and options for modifying how the
``expression`` array is generated by looking at the :ref:`api_ref`.

.. _usage_expression_dataframe:

The parcellated expression DataFrame
------------------------------------

The ``expression`` object returned by :func:`abagen.get_expression_data` is a
``pandas.DataFrame``, where rows correspond to region labels as defined in the
atlas image, columns correspond to genes, and entry values are microarray
expression data normalized and aggregated across donors:

.. doctest::

    >>> print(expression)
    gene_symbol      A1BG  A1BG-AS1       A2M  ...       ZYX     ZZEF1      ZZZ3
    label                                      ...
    1            0.584886  0.680115  0.456676  ...  0.628942  0.372817  0.486182
    2            0.520235  0.648150  0.390960  ...  0.554345  0.294109  0.563199
    3                 NaN       NaN       NaN  ...       NaN       NaN       NaN
    ...               ...       ...       ...  ...       ...       ...       ...
    81           0.496183  0.342802  0.426420  ...  0.266740  0.574540  0.492474
    82           0.756227  0.392104  0.453205  ...  0.291817  0.380244  0.673324
    83           0.429359  0.224082  0.652792  ...  0.411622  0.661333  0.440884
    <BLANKLINE>
    [83 rows x 15661 columns]


By default the data are normalized using a scaled robust sigmoid function such
that expression values for a given gene will range from 0-1, where 0 indicates
the region with the lowest expression of that gene and 1 indicates the region
with highest.

Since the generated DataFrame is an aggregate (default: average) of multiple
donors it is possible (likely) that a given region may not have any expression
values *exactly* equal to 0 or 1.

.. _usage_expression_dense:

Getting dense expression data
-----------------------------

Unfortunately, due to how tissue samples were collected from the donor brains
it is possible that some regions in an atlas may not be represented by any
expression data. As you can see above, the third row in the returned DataFrame
is filled with NaN values. That region, corresponding to the right frontal pole
in the Desikan-Killiany atlas, was not matched to any tissue samples; this is
likely due to the fact that only two of the six donors have tissue samples
taken from the right hemisphere.

If you require a *dense* matrix---that is, you need expression values for
**every** region in your ``atlas``---there are a few parameters that you can
consider tuning to try and achieve this.

.. _usage_expression_exact:

Inexact matching with the ``exact`` parameter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, the :func:`abagen.get_expression_data` function will attempt to be
as precise as possible in matching microarray samples with brain regions. It
takes the following steps to do this for each tissue sample:

    1. Determine if the sample falls directly within a region of ``atlas``.
    2. Check to see if the sample is close to any regions by slowly expanding
       the search space (in 1mm increments) to include nearby voxels up to a
       specified distance threshold (specified via the ``tolerance``
       parameter).
    3. If there are multiple nearby regions, determine which region is closer
       by calculating the center-of-mass of the abutting regions.

If at any step a sample can be assigned to a region in ``atlas`` the sample is
assigned to that region and the matching procedure is terminated. However, as
we saw, regions with no assigned samples from any donor are simply left as NaN.

If you would like to force all regions to be assigned at least one sample you
can set ``exact=False``. By doing this, the function will go through the
normal procedure documented above and then, once all samples are matched,
check for any remaining "empty" regions and assign them the expression values
of the sample falling closest to the center of mass of that region. In this
way every brain region is matched to *at least* one sample.

Thus, passing ``exact=False`` when calling :func:`abagen.get_expression_data`
will return a dense matrix (at the expense of some anatomical precision):

.. insert figure demonstration matching of samples with ``exact`` parameter

.. doctest::
    :options: +SKIP

    >>> exp_exact = abagen.get_expression_data(atlas['image'], atlas['info'], exact=False)
    >>> print(exp_exact)
    gene_symbol      A1BG  A1BG-AS1       A2M  ...       ZYX     ZZEF1      ZZZ3
    label                                      ...
    1            0.578278  0.689091  0.460607  ...  0.556139  0.374723  0.494891
    2            0.512639  0.656650  0.397684  ...  0.481831  0.298676  0.568115
    3            0.670337  0.819654  0.262418  ...  0.540717  0.153573  0.627640
    ...               ...       ...       ...  ...       ...       ...       ...
    81           0.487488  0.355369  0.437644  ...  0.252065  0.567333  0.499693
    82           0.749459  0.412666  0.468690  ...  0.270398  0.376335  0.667313
    83           0.417314  0.240221  0.648598  ...  0.389826  0.654373  0.449491
    <BLANKLINE>
    [83 rows x 15661 columns]


.. _usage_expression_lrmirror:

Duplicating samples with the ``lr_mirror`` parameter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your parcellation is sufficiently low-resolution it is likely that most
regions in the left hemisphere (for which all six donors have tissue samples)
will be matched to at least one sample, whereas regions in the right hemisphere
may come up short.

To remedy this you can try setting the ``lr_mirror`` parameter to ``True`` when
calling :func:`abagen.get_expression_data`. This, as the name suggests,
performs a left/right mirroring of all the tissue samples from all donors. That
is, all samples in the left hemisphere are duplicated and mirrored onto the
right hemisphere, and vice-versa for right to left. Unlike the ``exact=False``
parameter this will not *guarantee* that all regions are matched to a sample,
but it will dramatically increase the likelihood that this will happen:

.. insert figure demonstrating duplication of samples across hemispheres

.. doctest::
    :options: +SKIP

    >>> exp_mirror = abagen.get_expression_data(atlas['image'], atlas['info'], lr_mirror=True)
    >>> print(exp_mirror)
    gene_symbol      A1BG  A1BG-AS1       A2M  ...       ZYX     ZZEF1      ZZZ3
    label                                      ...
    1            0.626998  0.685507  0.451278  ...  0.623884  0.392830  0.547517
    2            0.580470  0.623133  0.486455  ...  0.614684  0.301301  0.541552
    3            0.819186  0.690949  0.486005  ...  0.643147  0.512646  0.833094
    ...               ...       ...       ...  ...       ...       ...       ...
    81           0.479263  0.349313  0.420825  ...  0.273995  0.575442  0.498685
    82           0.766295  0.425379  0.430502  ...  0.268913  0.391012  0.687172
    83           0.413256  0.220973  0.672984  ...  0.417636  0.669784  0.454275
    <BLANKLINE>
    [83 rows x 15661 columns]


Note that since this effectively duplicates the number of tissue samples the
function runtime will increase somewhat. Also notice how the ``lr_mirror``
parameter changes the expression values for all the regions more dramatically
than the ``exact=True`` parameter. It is worth considering which (if either!)
of these options best suits your intended analysis.
